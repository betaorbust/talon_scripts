from talon.voice import Context, Key, press
from ..misc.utils import (
    text,
    parse_words,
    insert,
    is_filetype,
    PressWait,
    CursorText
)

POPUP_WAIT_S = .75

JS_EXTENSIONS = (".js", ".jsx", ".ts", ".tsx")

context = Context("javascript", func=is_filetype(JS_EXTENSIONS))


def remove_spaces_around_dashes(m):
    words = parse_words(m)
    s = " ".join(words)
    s = s.replace(" â€“ ", "-")
    insert(s)


tab_complete = PressWait('tab', POPUP_WAIT_S)

context.keymap(
    {
        # All reserved words that we actually use
        "arguments": "arguments",
        "asink | async": "async ",
        "await": "await ",
        "boolean": "boolean",
        "break": "break;",
        "case": "case",
        "catch": "catch(e){",
        "class": "class ",
        "const": "const ",
        "continue": "continue; ",
        "debugger": "debugger; ",
        "default": "default ",
        "obj delete": "delete",
        "do": "do",
        "elsy": ["else", tab_complete],
        "else if": ["else if", tab_complete],
        "export": "export ",
        "extends": "extends ",
        "false": "false",
        "finally": ["finally{}", Key("left")],
        "for loop": ["for", tab_complete],
        "function": "function",
        "goto": "goto",
        "iffy": ["if", tab_complete],
        "import": "import",
        "obj in": "in ",
        "instance of": "instanceof",
        "let": "let ",
        "new": "new ",
        "null": "null",
        "return": "return ",
        "super": ["super()", Key("left")],
        "switch": ["switch", tab_complete],
        "this": "this",
        "throw": ["throw new Error();", Key('Left'), Key('Left')],
        "true": "true",
        "try": ["trycatch", tab_complete],
        "typeof": "typeof ",
        "var": "var ",
        "while": ["while", tab_complete],
        "with": "with ",
        "yield": "yield ",

        # Global values
        "infinity": "Infinity",
        "Nan": "NaN",
        "undefined": "undefined",
        "null": "null",

        # Function Properties
        "eval": ["eval()", Key("left")],
        "is finite": ["isFinite()", Key("left")],
        "is Nan": ["isNaN()", Key("left")],
        "parse float": ["parseFloat()", Key("left")],
        "parse int": ["parseInt()", Key("left")],
        "decode you are eye": ["decodeURI()", Key("left")],
        "decode you are eye component": ["decodeURIComponent()", Key("left")],
        "encode you are eye": ["encodeURI()", Key("left")],
        "encode you are eye component": ["encodeURIComponent()", Key("left")],

        # FUNDAMENTAL OBJECTS
        "[new] error": ["new Error()", Key("left")],
        "[new] symbol": ["Symbol()", Key("left")],
        "new Reg ex": ["new RegExp()"],
        "Reg ex": ["//", Key("left")],

        # NUMBERS AND DATES
        # Dates
        "new date": ["new Date()", Key("left")],
        "date dot now": "Date.now()",
        "date dot UTC": ["Date.UTC()", Key("left")],
        # Date Getters
        "Date dot get date": ".getDate()",
        "Date dot get day": ".getDay()",
        "Date dot get full year": ".getFullYear()",
        "Date dot get hours": ".getHours()",
        "Date dot get milliseconds": ".getMilliseconds()",
        "Date dot get minutes": ".getMinutes()",
        "Date dot get month": ".getMonth()",
        "Date dot get seconds": ".getSeconds()",
        "Date dot get time": ".getTime()",
        "Date dot get timezone offset": ".getTimezoneOffset()",
        "Date dot get UTC date": ".getUTCDate()",
        "Date dot get UTC day": ".getUTCDay()",
        "Date dot get UTC full year": ".getUTCFullYear()",
        "Date dot get UTC hours": ".getUTCHours()",
        "Date dot get UTC milliseconds": ".getUTCMilliseconds()",
        "Date dot get UTC minutes": ".getUTCMinutes()",
        "Date dot get UTC month": ".getUTCMonth()",
        # Date setters
        "Date dot get UTC seconds": ".getUTCSeconds()",
        "Date dot setDate": ".setDate()",
        "Date dot set full year": ".setFullYear()",
        "Date dot setHours": ".setHours()",
        "Date dot set milliseconds": ".setMilliseconds()",
        "Date dot set minutes": ".setMinutes()",
        "Date dot set month": ".setMonth()",
        "Date dot set seconds": ".setSeconds()",
        "Date dot set time": ".setTime()",
        "Date dot set UTC date": ".setUTCDate()",
        "Date dot set UTC full year": ".setUTCFullYear()",
        "Date dot set UTC hours": ".setUTCHours()",
        "Date dot set UTC milliseconds": ".setUTCMilliseconds()",
        "Date dot set UTC minutes": ".setUTCMinutes()",
        "Date dot set UTC month": ".setUTCMonth()",
        "Date dot set UTC seconds": ".setUTCSeconds()",
        # Date Conversion Getters
        "Date dot to date string": ".toDateString()",
        "Date dot to iso string": ".toISOString()",
        "Date dot to json": ".toJSON()",
        "Date dot to locale date string": ".toLocaleDateString()",
        "Date dot to locale string": ".toLocaleString()",
        "Date dot to locale time string": ".toLocaleTimeString()",
        "Date dot to string": ".toString()",
        "Date dot to time string": ".toTimeString()",
        "Date dot to UTC string": ".toUTCString()",

        # Numbers
        "Number dot epsilon": "Number.EPSILON",
        "Number dot Max safe integer": "Number.MAX_SAFE_INTEGER",
        "Number dot Max value": "Number.MAX_VALUE",
        "Number dot Min safe intiger": "Number.MIN_SAFE_INTEGER",
        "Number dot Min value": "Number.MIN_VALUE",
        "Number dot Nan": "Number.NaN",
        "Number dot negative infinity": "Number.NEGATIVE_INFINITY",
        "Number dot positive infinity": "Number.POSITIVE_INFINITY",
        "Number dot is Nan": ["Number.isNaN()", Key("left")],
        "Number dot is finite": ["Number.isFinite()", Key("left")],
        "Number dot is integer": ["Number.isInteger()", Key("left")],
        "Number dot is safe integer": ["Number.isSafeInteger()", Key("left")],
        "Number dot to integer": ["Number.toInteger()", Key("left")],
        "Number dot parse float": ["Number.parseFloat()", Key("left")],
        "Number dot parse int": ["Number.parseInt()", Key("left")],
        "Number dot to fixed": ["Number.prototype.toFixed()", Key("left")],
        "Number dot to locale string": ["Number.prototype.toLocaleString()", Key("left")],
        "Number dot to precision": ["Number.prototype.toPrecision()", Key("left")],
        "Number dot to string": ["Number.prototype.toString()", Key("left")],

        # Math
        "Math dot (abs | absolute)": ["Math.abs()", Key("left")],
        "Math dot (ceil | ceiling)": ["Math.ceil()", Key("left")],
        "Math dot floor": ["Math.floor()", Key("left")],
        "Math dot max": ["Math.max()", Key("left")],
        "Math dot min": ["Math.min()", Key("left")],
        "Math dot pow": ["Math.pow()", Key("left")],
        "Math dot random": "Math.random()",
        "Math dot round": ["Math.round()", Key("left")],
        "Math dot (trunk | truncate)": ["Math.trunc()", Key("left")],

        # Strings
        "string dot from char code": ["String.fromCharCode()", Key("left")],
        "string dot from code point": ["String.fromCodePoint()", Key("left")],
        "string dot length": ".length",

        "string dot char at": [".charAt()", Key("left")],
        "string dot char code at": [".charCodeAt()", Key("left")],
        "string dot code point at": [".codePointAt()", Key("left")],
        "string dot concat": [".concat()", Key("left")],
        "string dot includes": [".includes()", Key("left")],
        "string dot ends with": [".endsWith()", Key("left")],
        "string dot index of": [".indexOf()", Key("left")],
        "string dot last index of": [".lastIndexOf()", Key("left")],
        "string dot locale compare": [".localeCompare()", Key("left")],
        "string dot match": [".match()", Key("left")],
        "string dot match all": [".matchAll()", Key("left")],
        "string dot normalize": [".normalize()", Key("left")],
        "string dot pad end": [".padEnd()", Key("left")],
        "string dot pad start": [".padStart()", Key("left")],
        "string dot repeat": [".repeat()", Key("left")],
        "string dot replace": [".replace()", Key("left")],
        "string dot search": [".search()", Key("left")],
        "string dot slice": [".slice()", Key("left")],
        "string dot split": [".split()", Key("left")],
        "string dot starts with": [".startsWith()", Key("left")],
        "string dot sub string": [".substring()", Key("left")],
        "string dot to locale lower case": [".toLocaleLowerCase()", Key("left")],
        "string dot to locale upper case": [".toLocaleUpperCase()", Key("left")],
        "string dot to lower case": [".toLowerCase()", Key("left")],
        "string dot to string": [".toString()", Key("left")],
        "string dot to upper case": [".toUpperCase()", Key("left")],
        "string dot trim": [".trim()", Key("left")],
        "string dot trim start": [".trimStart()", Key("left")],
        "string dot trim left": [".trimLeft()", Key("left")],
        "string dot trim end": [".trimEnd()", Key("left")],
        "string dot trim right": [".trimRight()", Key("left")],
        "string dot value of": [".valueOf()", Key("left")],

        # Regex
        "Reg ex dot exec": [".exec()", Key("left")],
        "Reg ex dot test": [".test()", Key("left")],
        "Reg ex dot to string": [".toString()", Key("left")],

        # Functions
        "(function | funk)": ["function", tab_complete],
        "anon [funk]": ["anon", tab_complete],

        # Array methods
        "array dot is array": ["Array.isArray()", Key("left")],
        "array dot from": ["Array.from()", Key("left")],
        "array dot of": ["Array.of()", Key("left")],

        "array dot con cat": [".concat()", Key("left")],
        "array dot every": [".every()", Key("left")],
        "array dot fill": [".fill()", Key("left")],
        "array dot filter": [".filter()", Key("left")],
        "array dot find": [".find()", Key("left")],
        "array dot find index": [".findIndex()", Key("left")],
        "array dot flat": [".flat()", Key("left")],
        "array dot flat map": [".flatMap()", Key("left")],
        "array dot for each": [".forEach()", Key("left")],
        "array dot includes": [".includes()", Key("left")],
        "array dot index of": [".indexOf()", Key("left")],
        "array dot join": [".join()", Key("left")],
        "array dot length": ".length",
        "array dot map": [".map()", Key("left")],
        "array dot pop": ".pop()",
        "array dot push": [".push()", Key("left")],
        "array dot reduce": [".reduce()", Key("left")],
        "array dot reduceRight": [".reduceRight()", Key("left")],
        "array dot reverse": ".reverse()",
        "array dot shift": ".shift()",
        "array dot slice": [".slice()", Key("left")],
        "array dot some": [".some()", Key("left")],
        "array dot sort": [".sort()", Key("left")],
        "array dot splice": [".splice()", Key("left")],
        "array dot unshift": [".unshift()", Key("left")],

        # Object methods
        "Object dot assign": ["Object.assign()", Key("left")],
        "Object dot create": ["Object.create()", Key("left")],
        "Object dot define property": ["Object.defineProperty()", Key("left")],
        "Object dot define properties": ["Object.defineProperties()", Key("left")],
        "Object dot entries": ["Object.entries()", Key("left")],
        "Object dot freeze": ["Object.freeze()", Key("left")],
        "Object dot from entries": ["Object.fromEntries()", Key("left")],
        "Object dot get own property descriptor": ["Object.getOwnPropertyDescriptor()", Key("left")],
        "Object dot get own property descriptors": ["Object.getOwnPropertyDescriptors()", Key("left")],
        "Object dot get own property names": ["Object.getOwnPropertyNames()", Key("left")],
        "Object dot get own property symbols": ["Object.getOwnPropertySymbols()", Key("left")],
        "Object dot get prototype of": ["Object.getPrototypeOf()", Key("left")],
        "Object dot is": ["Object.is()", Key("left")],
        "Object dot is extensible": ["Object.isExtensible()", Key("left")],
        "Object dot is frozen": ["Object.isFrozen()", Key("left")],
        "Object dot is sealed": ["Object.isSealed()", Key("left")],
        "Object dot keys": ["Object.keys()", Key("left")],
        "Object dot prevent extensions": ["Object.preventExtensions()", Key("left")],
        "Object dot seal": ["Object.seal()", Key("left")],
        "Object dot set prototype of": ["Object.setPrototypeOf()", Key("left")],
        "Object dot values": ["Object.values()", Key("left")],

        "const [<dgndictation>]": ["const ", text],
        "let [<dgndictation>]": ["let ", text],
        "args": ["()", Key("left")],
        "index": ["[]", Key("left")],
        "block": [" {}", Key("left enter enter up tab")],
        "empty array": "[]",
        "empty object": "{}",
        "call": "()",
        "state func": "function ",
        "state return": "return ",
        "state constructor": "constructor ",
        "state if": ["if ()", Key("left")],
        "state else": " else ",
        "state else if": [" else if ()", Key("left")],
        "state while": ["while ()", Key("left")],
        "state for": ["for ()", Key("left")],
        "state switch": ["switch ()", Key("left")],
        "state case": ["case \nbreak;", Key("up")],
        "state goto": "goto ",
        "state important": "import ",
        "state class": "class ",
        "state extends": "extends ",
        "state super": "super",
        "comment js": "// ",
        "word no": "null",
        "arrow": " => ",
        "assign": " = ",
        "op (minus | subtract)": " - ",
        "op (plus | add)": " + ",
        "op (times | multiply)": " * ",
        "op divide": " / ",
        "op mod": " % ",
        "[op] (minus | subtract) equals": " -= ",
        "[op] (plus | add) equals": " += ",
        "[op] (times | multiply) equals": " *= ",
        "[op] divide equals": " /= ",
        "[op] mod equals": " %= ",
        "(op | is) greater [than]": " > ",
        "(op | is) less [than]": " < ",
        "(op | is) equal": " === ",
        "(op | is) not equal": " !== ",
        "(op | is) greater [than] or equal": " >= ",
        "(op | is) less [than] or equal": " <= ",
        "(op (power | exponent) | to the power [of])": " ** ",
        "op and": " && ",
        "op or": " || ",

        # commands for react-redux
        "combo provider": "ImportProvider",
    }
)
