from talon.voice import Context, Key, press
from ..misc.utils import text, parse_words, insert, is_filetype, CursorText
# Some of these are going to tightly couple to my VSCode implementation because that's where I
# write javascript for the most part
from ..apps.vscode import VSCodeTabComplete


JS_EXTENSIONS = (".js", ".jsx", ".ts", ".tsx")


context = Context("javascript", func=is_filetype(JS_EXTENSIONS))


def remove_spaces_around_dashes(m):
    words = parse_words(m)
    s = " ".join(words)
    s = s.replace(" â€“ ", "-")
    insert(s)


context.keymap(
    {
        # All reserved words that we actually use
        "arguments": "arguments",
        "asink | async": "async ",
        "await": "await ",
        "boolean": "boolean",
        "break": "break;",
        "case": "case",
        "catch": "catch(e){",
        "class": "class ",
        "const": "const ",
        "continue": "continue; ",
        "debugger": "debugger; ",
        "default": "default ",
        "obj delete": "delete",
        "do": "do",
        "elsy": VSCodeTabComplete(["else"]),
        "else if": VSCodeTabComplete(["else if"]),
        "export": "export ",
        "extends": "extends ",
        "false": "false",
        "finally": ["finally{}", Key("left")],
        "for loop": VSCodeTabComplete(["for"]),
        "goto": "goto",
        "iffy": VSCodeTabComplete(["if"]),
        "import": "import",
        "obj in": "in ",
        "instance of": "instanceof",
        "let": "let ",
        "new": "new ",
        "null": "null",
        "return": "return ",
        "super": CursorText("super({.})"),
        "switch": VSCodeTabComplete(["switch"]),
        "this": "this",
        "throw": ["throw new Error();", Key('Left'), Key('Left')],
        "true": "true",
        "try": VSCodeTabComplete(["trycatch"]),
        "typeof": "typeof ",
        "var": "var ",
        "while": VSCodeTabComplete(["while"]),
        "with": "with ",
        "yield": "yield ",

        # Global values
        "infinity": "Infinity",
        "Nan": "NaN",
        "undefined": "undefined",
        "null": "null",

        # Function Properties
        "eval": CursorText("eval({.})"),
        "is finite": CursorText("isFinite({.})"),
        "is Nan": CursorText("isNaN({.})"),
        "parse float": CursorText("parseFloat({.})"),
        "parse int": CursorText("parseInt({.})"),
        "decode you are eye": CursorText("decodeURI({.})"),
        "decode you are eye component": CursorText("decodeURIComponent({.})"),
        "encode you are eye": CursorText("encodeURI({.})"),
        "encode you are eye component": CursorText("encodeURIComponent({.})"),

        # FUNDAMENTAL OBJECTS
        "[new] error": CursorText("new Error({.})"),
        "[new] symbol": CursorText("Symbol({.})"),
        "new Reg ex": ["new RegExp()"],
        "Reg ex": ["//", Key("left")],

        # NUMBERS AND DATES
        # Dates
        "new date": CursorText("new Date({.})"),
        "date dot now": "Date.now()",
        "date dot UTC": CursorText("Date.UTC({.})"),
        # Date Getters
        "Date dot get date": ".getDate()",
        "Date dot get day": ".getDay()",
        "Date dot get full year": ".getFullYear()",
        "Date dot get hours": ".getHours()",
        "Date dot get milliseconds": ".getMilliseconds()",
        "Date dot get minutes": ".getMinutes()",
        "Date dot get month": ".getMonth()",
        "Date dot get seconds": ".getSeconds()",
        "Date dot get time": ".getTime()",
        "Date dot get timezone offset": ".getTimezoneOffset()",
        "Date dot get UTC date": ".getUTCDate()",
        "Date dot get UTC day": ".getUTCDay()",
        "Date dot get UTC full year": ".getUTCFullYear()",
        "Date dot get UTC hours": ".getUTCHours()",
        "Date dot get UTC milliseconds": ".getUTCMilliseconds()",
        "Date dot get UTC minutes": ".getUTCMinutes()",
        "Date dot get UTC month": ".getUTCMonth()",
        # Date setters
        "Date dot get UTC seconds": ".getUTCSeconds()",
        "Date dot setDate": ".setDate()",
        "Date dot set full year": ".setFullYear()",
        "Date dot setHours": ".setHours()",
        "Date dot set milliseconds": ".setMilliseconds()",
        "Date dot set minutes": ".setMinutes()",
        "Date dot set month": ".setMonth()",
        "Date dot set seconds": ".setSeconds()",
        "Date dot set time": ".setTime()",
        "Date dot set UTC date": ".setUTCDate()",
        "Date dot set UTC full year": ".setUTCFullYear()",
        "Date dot set UTC hours": ".setUTCHours()",
        "Date dot set UTC milliseconds": ".setUTCMilliseconds()",
        "Date dot set UTC minutes": ".setUTCMinutes()",
        "Date dot set UTC month": ".setUTCMonth()",
        "Date dot set UTC seconds": ".setUTCSeconds()",
        # Date Conversion Getters
        "Date dot to date string": ".toDateString()",
        "Date dot to iso string": ".toISOString()",
        "Date dot to json": ".toJSON()",
        "Date dot to locale date string": ".toLocaleDateString()",
        "Date dot to locale string": ".toLocaleString()",
        "Date dot to locale time string": ".toLocaleTimeString()",
        "Date dot to string": ".toString()",
        "Date dot to time string": ".toTimeString()",
        "Date dot to UTC string": ".toUTCString()",

        # Numbers
        "Number dot epsilon": "Number.EPSILON",
        "Number dot Max safe integer": "Number.MAX_SAFE_INTEGER",
        "Number dot Max value": "Number.MAX_VALUE",
        "Number dot Min safe intiger": "Number.MIN_SAFE_INTEGER",
        "Number dot Min value": "Number.MIN_VALUE",
        "Number dot Nan": "Number.NaN",
        "Number dot negative infinity": "Number.NEGATIVE_INFINITY",
        "Number dot positive infinity": "Number.POSITIVE_INFINITY",
        "Number dot is Nan": CursorText("Number.isNaN({.})"),
        "Number dot is finite": CursorText("Number.isFinite({.})"),
        "Number dot is integer": CursorText("Number.isInteger({.})"),
        "Number dot is safe integer": CursorText("Number.isSafeInteger({.})"),
        "Number dot to integer": CursorText("Number.toInteger({.})"),
        "Number dot parse float": CursorText("Number.parseFloat({.})"),
        "Number dot parse int": CursorText("Number.parseInt({.})"),
        "Number dot to fixed": CursorText("Number.prototype.toFixed({.})"),
        "Number dot to locale string": CursorText("Number.prototype.toLocaleString({.})"),
        "Number dot to precision": CursorText("Number.prototype.toPrecision({.})"),
        "Number dot to string": CursorText("Number.prototype.toString({.})"),

        # Math
        "Math dot (abs | absolute)": CursorText("Math.abs({.})"),
        "Math dot (ceil | ceiling)": CursorText("Math.ceil({.})"),
        "Math dot floor": CursorText("Math.floor({.})"),
        "Math dot max": CursorText("Math.max({.})"),
        "Math dot min": CursorText("Math.min({.})"),
        "Math dot pow": CursorText("Math.pow({.})"),
        "Math dot random": "Math.random()",
        "Math dot round": CursorText("Math.round({.})"),
        "Math dot (trunk | truncate)": CursorText("Math.trunc({.})"),

        # Strings
        "string dot from char code": CursorText("String.fromCharCode({.})"),
        "string dot from code point": CursorText("String.fromCodePoint({.})"),
        "string dot length": ".length",

        "string dot char at": CursorText(".charAt({.})"),
        "string dot char code at": CursorText(".charCodeAt({.})"),
        "string dot code point at": CursorText(".codePointAt({.})"),
        "string dot concat": CursorText(".concat({.})"),
        "string dot includes": CursorText(".includes({.})"),
        "string dot ends with": CursorText(".endsWith({.})"),
        "string dot index of": CursorText(".indexOf({.})"),
        "string dot last index of": CursorText(".lastIndexOf({.})"),
        "string dot locale compare": CursorText(".localeCompare({.})"),
        "string dot match": CursorText(".match({.})"),
        "string dot match all": CursorText(".matchAll({.})"),
        "string dot normalize": CursorText(".normalize({.})"),
        "string dot pad end": CursorText(".padEnd({.})"),
        "string dot pad start": CursorText(".padStart({.})"),
        "string dot repeat": CursorText(".repeat({.})"),
        "string dot replace": CursorText(".replace({.})"),
        "string dot search": CursorText(".search({.})"),
        "string dot slice": CursorText(".slice({.})"),
        "string dot split": CursorText(".split({.})"),
        "string dot starts with": CursorText(".startsWith({.})"),
        "string dot sub string": CursorText(".substring({.})"),
        "string dot to locale lower case": CursorText(".toLocaleLowerCase({.})"),
        "string dot to locale upper case": CursorText(".toLocaleUpperCase({.})"),
        "string dot to lower case": CursorText(".toLowerCase({.})"),
        "string dot to string": CursorText(".toString({.})"),
        "string dot to upper case": CursorText(".toUpperCase({.})"),
        "string dot trim": CursorText(".trim({.})"),
        "string dot trim start": CursorText(".trimStart({.})"),
        "string dot trim left": CursorText(".trimLeft({.})"),
        "string dot trim end": CursorText(".trimEnd({.})"),
        "string dot trim right": CursorText(".trimRight({.})"),
        "string dot value of": CursorText(".valueOf({.})"),

        # Regex
        "Reg ex dot exec": CursorText(".exec({.})"),
        "Reg ex dot test": CursorText(".test({.})"),
        "Reg ex dot to string": CursorText(".toString({.})"),

        # Functions
        "(function | funk)": VSCodeTabComplete(["function"]),
        "anon [funk]": VSCodeTabComplete(["anon"]),

        # Array methods
        "array dot is array": CursorText("Array.isArray({.})"),
        "array dot from": CursorText("Array.from({.})"),
        "array dot of": CursorText("Array.of({.})"),

        "array dot con cat": CursorText(".concat({.})"),
        "array dot every": CursorText(".every({.})"),
        "array dot fill": CursorText(".fill({.})"),
        "array dot filter": CursorText(".filter({.})"),
        "array dot find": CursorText(".find({.})"),
        "array dot find index": CursorText(".findIndex({.})"),
        "array dot flat": CursorText(".flat({.})"),
        "array dot flat map": CursorText(".flatMap({.})"),
        "array dot for each": CursorText(".forEach({.})"),
        "array dot includes": CursorText(".includes({.})"),
        "array dot index of": CursorText(".indexOf({.})"),
        "array dot join": CursorText(".join({.})"),
        "array dot length": ".length",
        "array dot map": CursorText(".map({.})"),
        "array dot pop": ".pop()",
        "array dot push": CursorText(".push({.})"),
        "array dot reduce": CursorText(".reduce({.})"),
        "array dot reduceRight": CursorText(".reduceRight({.})"),
        "array dot reverse": ".reverse()",
        "array dot shift": ".shift()",
        "array dot slice": CursorText(".slice({.})"),
        "array dot some": CursorText(".some({.})"),
        "array dot sort": CursorText(".sort({.})"),
        "array dot splice": CursorText(".splice({.})"),
        "array dot unshift": CursorText(".unshift({.})"),

        # Object methods
        "Object dot assign": CursorText("Object.assign({.})"),
        "Object dot create": CursorText("Object.create({.})"),
        "Object dot define property": CursorText("Object.defineProperty({.})"),
        "Object dot define properties": CursorText("Object.defineProperties({.})"),
        "Object dot entries": CursorText("Object.entries({.})"),
        "Object dot freeze": CursorText("Object.freeze({.})"),
        "Object dot from entries": CursorText("Object.fromEntries({.})"),
        "Object dot get own property descriptor": CursorText("Object.getOwnPropertyDescriptor({.})"),
        "Object dot get own property descriptors": CursorText("Object.getOwnPropertyDescriptors({.})"),
        "Object dot get own property names": CursorText("Object.getOwnPropertyNames({.})"),
        "Object dot get own property symbols": CursorText("Object.getOwnPropertySymbols({.})"),
        "Object dot get prototype of": CursorText("Object.getPrototypeOf({.})"),
        "Object dot is": CursorText("Object.is({.})"),
        "Object dot is extensible": CursorText("Object.isExtensible({.})"),
        "Object dot is frozen": CursorText("Object.isFrozen({.})"),
        "Object dot is sealed": CursorText("Object.isSealed({.})"),
        "Object dot keys": CursorText("Object.keys({.})"),
        "Object dot prevent extensions": CursorText("Object.preventExtensions({.})"),
        "Object dot seal": CursorText("Object.seal({.})"),
        "Object dot set prototype of": CursorText("Object.setPrototypeOf({.})"),
        "Object dot values": CursorText("Object.values({.})"),

        "const [<dgndictation>]": ["const ", text],
        "let [<dgndictation>]": ["let ", text],
        "args": CursorText("({.})"),
        "index": ["[]", Key("left")],
        "block": [" {}", Key("left enter enter up tab")],
        "empty array": "[]",
        "empty object": "{}",
        "call": "()",
        "state func": "function ",
        "state return": "return ",
        "state constructor": "constructor ",
        "state if": CursorText("if ({.})"),
        "state else": " else ",
        "state else if": CursorText(" else if ({.})"),
        "state while": CursorText("while ({.})"),
        "state for": CursorText("for ({.})"),
        "state switch": CursorText("switch ({.})"),
        "state case": ["case \nbreak;", Key("up")],
        "state goto": "goto ",
        "state important": "import ",
        "state class": "class ",
        "state extends": "extends ",
        "state super": "super",
        "comment js": "// ",
        "word no": "null",
        "arrow": " => ",
        "assign": " = ",
        "op (minus | subtract)": " - ",
        "op (plus | add)": " + ",
        "op (times | multiply)": " * ",
        "op divide": " / ",
        "op mod": " % ",
        "[op] (minus | subtract) equals": " -= ",
        "[op] (plus | add) equals": " += ",
        "[op] (times | multiply) equals": " *= ",
        "[op] divide equals": " /= ",
        "[op] mod equals": " %= ",
        "(op | is) greater [than]": " > ",
        "(op | is) less [than]": " < ",
        "(op | is) equal": " === ",
        "(op | is) not equal": " !== ",
        "(op | is) greater [than] or equal": " >= ",
        "(op | is) less [than] or equal": " <= ",
        "(op (power | exponent) | to the power [of])": " ** ",
        "op and": " && ",
        "op or": " || ",

        # commands for react-redux
        "combo provider": "ImportProvider",
    }
)
